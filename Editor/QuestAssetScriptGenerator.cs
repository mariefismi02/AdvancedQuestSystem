#if UNITY_EDITOR
using UnityEditor;
using UnityEngine;
using System;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Collections.Generic;

namespace mariefismi02.Quest.Editor
{

    public class QuestAssetScriptGenerator : EditorWindow
    {
        private Type selectedGenericType;
        private List<Type> ownershipCandidates = new();
        private List<Type> compositeCandidates = new();
        private string outputPath = "Assets/Scripts/Quest/AutoGenerated";

        [MenuItem("Tools/Quest/Asset Script Generator")]
        public static void OpenWindow()
        {
            GetWindow<QuestAssetScriptGenerator>("Quest Asset Script Generator");
        }

        private void OnEnable()
        {
            RefreshCandidates();
        }

        private void RefreshCandidates()
        {
            var allTypes = AppDomain.CurrentDomain.GetAssemblies()
                .SelectMany(a => a.GetTypes());

            // Generic candidates
            ownershipCandidates = allTypes
                .Where(t => t.GetCustomAttribute<QuestOwnershipAttribute>() != null)
                .ToList();

            // Composite candidates
            compositeCandidates = allTypes
                .Where(t => t.GetCustomAttribute<QuestCompositeAttribute>() != null)
                .ToList();
        }

        private void OnGUI()
        {
            EditorGUILayout.LabelField("Quest Generator", EditorStyles.boldLabel);

            // Select output folder
            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField("Output Path", GUILayout.Width(80));
            outputPath = EditorGUILayout.TextField(outputPath);
            if (GUILayout.Button("...", GUILayout.Width(30)))
            {
                string folder = EditorUtility.OpenFolderPanel("Select Output Folder", "Assets", "");
                if (!string.IsNullOrEmpty(folder))
                {
                    if (folder.StartsWith(Application.dataPath))
                        folder = "Assets" + folder.Substring(Application.dataPath.Length);
                    outputPath = folder;
                }
            }
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.Space();
            EditorGUILayout.LabelField("Quest Ownership:", EditorStyles.boldLabel);

            // Dropdown for generic type
            var names = ownershipCandidates.Select(t => t.Name).ToArray();
            int selectedIndex = selectedGenericType != null ?
                ownershipCandidates.IndexOf(selectedGenericType) : 0;

            if (names.Length > 0)
            {
                int newIndex = EditorGUILayout.Popup("Generic Type", selectedIndex, names);
                if (newIndex >= 0 && newIndex < ownershipCandidates.Count)
                    selectedGenericType = ownershipCandidates[newIndex];
            }
            else
            {
                EditorGUILayout.LabelField("No [QuestOwnership] found.");
            }

            if (GUILayout.Button("Generate Quest Asset Script for Selected Ownership Type"))
            {
                if (selectedGenericType != null)
                    GenerateQuestAsset(selectedGenericType);
                else
                    Debug.LogWarning("No ownership type selected!");
            }

            EditorGUILayout.Space();

            if (GUILayout.Button("Generate All Composite Data Scripts"))
            {
                GenerateAllCompositeDataScripts();
            }

            EditorGUILayout.Space();
            if (GUILayout.Button("Refresh"))
            {
                RefreshCandidates();
            }
        }

        private void GenerateAllCompositeDataScripts()
        {
            foreach (var type in compositeCandidates)
            {
                GenerateCompositeDataScript(type);
            }
            AssetDatabase.Refresh();
        }

        private void GenerateQuestAsset(Type genericType)
        {
            string className = $"{genericType.Name}QuestAsset";
            string filePath = Path.Combine(outputPath, className + ".cs");

            // template pakai SerializeReference, bukan Asset
            string template =
                $@"
using mariefismi02.Quest;
using mariefismi02.Quest.Asset;
using System;
using System.Collections.Generic;
using UnityEngine;

[CreateAssetMenu(fileName = ""{className}"", menuName = ""Quests/{genericType.Name} Quest"")]
public class {className} : ScriptableObject
{{
    public string QuestId;

    // serialized references, jadi bisa isi turunan QuestObjectiveData/QuestRewardData langsung di inspector
    [SerializeReference]
    public List<QuestObjectiveData> Objectives = new List<QuestObjectiveData>();

    [SerializeReference]
    public List<QuestRewardData<{genericType.Name}>> Rewards = new List<QuestRewardData<{genericType.Name}>>();

    public Quest<{genericType.Name}> CreateData()
    {{
        var objectivesInstances = new List<QuestObjective>();
        foreach (var o in Objectives)
            objectivesInstances.Add(o.CreateInstance());

        var rewardInstances = new List<IQuestReward<{genericType.Name}>>();
        foreach (var r in Rewards)
            rewardInstances.Add(({($"IQuestReward<{genericType.Name}>")})r.CreateInstance());

        return new Quest<{genericType.Name}>(objectivesInstances, rewardInstances, QuestId, QuestState.InProgress);
    }}
}}";

            string dir = Path.GetDirectoryName(filePath);
            if (!Directory.Exists(dir))
            {
                Directory.CreateDirectory(dir);
            }
            File.WriteAllText(filePath, template);
            Debug.Log($"Generated QuestAsset script at {filePath}");
        }


        private void GenerateCompositeDataScript(Type type)
        {
            string className = type.Name + "Data";
            string filePath = Path.Combine($"{outputPath}/Composite", className + ".cs");

            // --- ambil ownerType dari attribute ---
            var compositeAttr = type.GetCustomAttribute<QuestCompositeAttribute>();
            Type ownerType = compositeAttr?.ForType; // misalnya Player
            string ownerTypeName = ownerType != null ? ownerType.Name : "object";

            // --- generate fields based on constructor parameters ---
            var ctor = type.GetConstructors().FirstOrDefault();
            string fields = "";
            string ctorParams = "";
            if (ctor != null)
            {
                foreach (var p in ctor.GetParameters())
                {
                    string fieldName = char.ToUpper(p.Name[0]) + p.Name.Substring(1);
                    // fix int32 -> int
                    string paramTypeName = p.ParameterType == typeof(Int32) ? "int" : p.ParameterType.Name;
                    fields += $"    public {paramTypeName} {fieldName};\n";
                    ctorParams += $"{fieldName}, ";
                }
                if (ctorParams.EndsWith(", "))
                    ctorParams = ctorParams.Substring(0, ctorParams.Length - 2);
            }

            // --- pilih base classnya sesuai reward atau objective ---
            bool isObjective = typeof(QuestObjective).IsAssignableFrom(type);
            string baseClass = isObjective ? "QuestObjectiveData" : $"QuestRewardData<{ownerTypeName}>";

            // --- tipe return CreateInstance ---
            string returnType = isObjective
                ? "QuestObjective"
                : $"IQuestReward<{ownerTypeName}>"; // otomatis ownerType dari attribute

            // --- template ---
            string template =
        $@"
using mariefismi02.Quest;
using mariefismi02.Quest.Asset;
using System;
using UnityEngine;

[Serializable]
public class {className} : {baseClass}
{{
{fields}
    public override {returnType} CreateInstance()
    {{
        return new {type.Name}({ctorParams});
    }}
}}";

            // --- save ---
            string dir = Path.GetDirectoryName(filePath);
            if (!Directory.Exists(dir))
            {
                Directory.CreateDirectory(dir);
            }
            File.WriteAllText(filePath, template);
            Debug.Log($"Generated CompositeData script for {type.Name} at {filePath}");
        }


    }
}
#endif
